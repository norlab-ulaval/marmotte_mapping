<launch>
    <arg name="folder" doc="Experiment root folder. Must constain bagfiles/ and results/ directories."/>
    <arg name="bagfile_name" doc="Bagfile name, located in folder/bagfiles/. Must not include .bag suffix"/>
    <arg name="rate" default="1.0" doc="Rate to play the rosbag with."/>
    <arg name="map_update_type" default="0"
         doc="Map update type:
                0: delay
                1: distance
                2: overlap"
    />
    <arg name="map_update_value" default="1.0"/>
    <arg name="map_folder"/>
    <arg name="output_name"/>
    <arg name="rviz" default="0"/>
    <arg name="prefix" default=""/>


    <node pkg="norlab_icp_mapper_ros" type="mapper_node" name="mapper_node" output="screen" respawn="false"  required="true">
        <param name="ignore_scan_count" value="3"/>
        
        <remap from="points_in" to="velodyne_points_deskewed"/>
        <param name="robot_frame" value="velodyne"/>
        <param name="odom_frame" value="odom"/>

        <param name="icp_config" value="$(find marmotte_mapping)/params/generated_icp_config.yaml"/>
        <param name="input_filters_config" value="$(find marmotte_mapping)/params/tunnels_input_filters.yaml"/>
        <param name="map_post_filters_config" value="$(find marmotte_mapping)/params/realtime_post_filters.yaml"/>


        <param if="$(eval arg('map_update_type') == 0)" name="map_update_condition" value="delay"/>
        <param if="$(eval arg('map_update_type') == 0)" name="map_update_delay" value="$(arg map_update_value)"/>

        <param if="$(eval arg('map_update_type') == 1)"  name="map_update_condition" value="distance"/>
        <param if="$(eval arg('map_update_type') == 1)"  name="map_update_distance" value="$(arg map_update_value)"/>

        <param if="$(eval arg('map_update_type') == 2)"  name="map_update_condition" value="overlap"/>
        <param if="$(eval arg('map_update_type') == 2)" name="map_update_overlap" value="$(arg map_update_value)"/>

        <param name="sensor_max_range" value="120"/>
        <param name="min_dist_new_point" value="0.0"/>
        <param name="compute_prob_dynamic" value="false"/>
        <param name="map_tf_publish_rate" value="20"/>

        <param name="max_idle_time" value="40" />

        <param name="beam_half_angle" value="0.017453292" /> <!-- 0.01 -->

        <param name="publish_tfs_between_registrations" value="true"/>

        <param name="is_online" value="false"/>

        <param name="initial_robot_pose"
               value="[[1., 0., 0., 0.],
                       [0., 1., 0., 0.],
                       [0., 0., 1., 0.],
                       [0., 0., 0., 1.]]"/>

        <param name="final_map_file_name" value="$(arg map_folder)/$(arg prefix)final_map.vtk"/>
        <param name="final_trajectory_file_name" value="$(arg map_folder)/$(arg prefix)final_traj.vtk"/>

    </node>

<!--     Static TF publisher-->
    <include file="$(find marmotte_description)/launch/description.launch"/>

    <node pkg="norlab_imu_tools" type="imu_and_wheel_odom_node" name="imu_and_wheel_odom_node" output="log" respawn="true">
        <remap from="imu_topic" to="/MTI_imu/data" />
        <remap from="wheel_odom_topic" to="/odom" />
        <param name="odom_frame" value="odom" />
        <param name="base_frame" value="base_link" />
        <param name="publish_translation" value="True" />
        <param name="wheel_odom_velocity_scale_x" value="1.0" />

        <rosparam param="imu_correction_rpy">[0.00418879, -0.00254, 0.0]</rosparam> ## original
        ## If odom message needed
        <param name="publish_odom" value="true" />
        <param name="odom_topic_name" value="imu_and_wheel_odom" />
    </node>


    <node pkg="rosbag" type="play" name="rosbag_play" output="log"
          args="--clock --quiet -k -r $(arg rate) $(arg folder)/bagfiles/$(arg bagfile_name).bag"
    />

    <node pkg="rosbag" type="record" name="rosbag_record" output="log"
          args="record -O /tmp/$(arg output_name).bag /icp_odom /imu_and_wheel_odom /map /odom"
    />
    
    <node if="$(eval arg('rviz') == 1)" type="rviz" name="rviz" pkg="rviz" args="-d marmotte" output="log"/>

    <node name="pcl_deskew_node" pkg="pointcloud_motion_deskew" type="pointcloud2_deskew_node" output="log" respawn="false">
        <remap from="input_point_cloud" to="/velodyne_points" />
        <remap from="output_point_cloud" to="/velodyne_points_deskewed"/>
    </node>

</launch>
